<!DOCTYPE html>
<% if (lang == 'en') { %>
<html lang="en">
<% } else { %>
<html lang="ar" dir="rtl" class="rtl">
<% } %>

<head>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <!-- Meta -->
  <meta name="description" content="HRA Awaran SFD Cyberstate">

  <title>HRA Portal</title>

  <!-- vendor css -->
  <link href="theme/lib/font-awesome/css/font-awesome.css" rel="stylesheet">
  <link href="theme/lib/Ionicons/css/ionicons.css" rel="stylesheet">
  <link href="theme/lib/perfect-scrollbar/css/perfect-scrollbar.css" rel="stylesheet">
  <link href="theme/lib/jquery-switchbutton/jquery.switchButton.css" rel="stylesheet">
  <link href="theme/lib/rickshaw/rickshaw.min.css" rel="stylesheet">
  <link href="theme/lib/select2/css/select2.min.css" rel="stylesheet">

  <!-- Bracket CSS -->
  <link rel="stylesheet" href="theme/css/bracket.css">
</head>

<body>

  <% include ../partials/header %>

  <!-- ########## START: MAIN PANEL ########## -->
  <div class="br-mainpanel">
    <div class="br-pagetitle">
      <i class="icon ion-ios-pulse"></i>
      <div>
        <% if (lang == 'en') { %>
        <h4>Construction of 8000 Houses | Level Achieved</h4>
        <p class="mg-b-0" id="labelRegion">LAST UPDATED ON: <%= LastUpdatedOn %></p>
        <% } else { %>
        <h3> الشيكات المستنيرة من قبل المستفيدين | بناء 8000 منزل</h3>
        <p class="mg-b-0" id="labelRegion">وفقًا لتقرير تسوية البنك حتى 2019</p>
        <% } %>
      </div>
    </div><!-- d-flex -->

    <div class="br-pagebody">
      <div class="row row-sm mg-t-20">
        <div class="col-lg-4">
          <div class="card shadow-base card-body pd-25 bd-0" style="width: 100%;height:100%;">
            <div class="row">
              <div class="col-sm-12">
                <h6 class="card-title tx-uppercase tx-12"> Summary</h6>
                <p class="display-4 tx-medium tx-inverse mg-b-5 tx-lato">
                  <%= (TotalCount/TotalCountEncashed*100).toFixed(2) %>%
                </p>
                <div class="progress mg-b-10">
                  <div class="progress-bar bg-primary progress-bar-xs wd-95p " role="progressbar" aria-valuenow="1" aria-valuemin="20" aria-valuemax="100"></div>
                </div><!-- progress -->
                <p class="tx-14"><%= TotalCount %> beneficiaries out of <%= TotalCountEncashed %> beneficiaires (who have encashed their 1st installment cheques) have achieved the door band Level. </p>

                <p>This is from the data received from 14 enumerators till <%= LastDataReceivedOn %></p>
                <br />
                <p style="display:none" class="tx-14 lh-3 mg-b-0">You can also see the progress of Level acheivement <a href="#">chart below</a>.</p>
              </div><!-- col-6 -->
            </div><!-- row -->
          </div><!-- card -->
        </div><!-- col-6 -->
        <div class="col-lg-8 mg-t-30 mg-lg-t-0">
          <div class="card shadow-base card-body pd-25 bd-0">
            <div class="row">
              <div class="col-sm-12">
                <h6 class="card-title tx-uppercase tx-12 tx-inverse">UC WISE LEVEL ACHIEVEMENT</h6>
                <canvas id="PaymentsDisbursedByUCChart" style="width: 100%;height:250px;"></canvas>
              </div><!-- col-6 -->

            </div><!-- row -->
          </div><!-- card -->
        </div><!-- col-6 -->
      </div>

      <div class="row row-sm mg-t-20">
        <div class="col-lg-6">
          <div class="card shadow-base bd-0 pd-10 mg-t-5">
            <h4 class="card-title tx-uppercase tx-12 tx-inverse">UC Wise Level Achievement</h4>
            <div id="LevelAchievedByUC" style="width: 100%;height:65vh;"></div>
          </div>
        </div><!-- col-8 -->
        <div class="col-lg-6">
          <div class="card shadow-base bd-0 pd-10 mg-t-5">
            <h4 class="card-title tx-uppercase tx-12 tx-inverse">Overall Level Achieved</h4>
            <div id="LevelAchievedAll" style="width: 100%;height:65vh;"></div>
          </div>
        </div><!-- col-8 -->
      </div><!-- row -->

      <div class="row row-sm mg-t-20">
        <div class="col-lg-12">
          <div class="card shadow-base bd-0 pd-10 mg-t-5">
            <h4 class="card-title tx-uppercase tx-12 tx-inverse">MONTH WISE LEVEL ACHIEVEMENT</h4>
            <div id="LevelAchievedByMonthChart" style="width: 100%;height:65vh;"></div>
          </div>
        </div><!-- col-8 -->
      </div><!-- row -->


    </div><!-- br-pagebody -->
    <% include ../partials/footer %>
  </div><!-- br-mainpanel -->
  <!-- ########## END: MAIN PANEL ########## -->

  <script src="theme/lib/jquery/jquery.js"></script>
  <script src="theme/js/popper.js"></script>
  <script src="theme/lib/bootstrap/js/bootstrap.js"></script>
  <script src="theme/lib/perfect-scrollbar/js/perfect-scrollbar.jquery.js"></script>
  <script src="theme/lib/moment/moment.js"></script>
  <script src="theme/lib/jquery-ui/jquery-ui.js"></script>
  <script src="theme/lib/jquery-switchbutton/jquery.switchButton.js"></script>
  <script src="theme/lib/peity/jquery.peity.js"></script>
  <script src="theme/lib/d3/d3.js"></script>
  <script src="theme/lib/rickshaw/rickshaw.min.js"></script>
  <script src="theme/lib/Flot/jquery.flot.js"></script>
  <script src="theme/lib/Flot/jquery.flot.resize.js"></script>
  <script src="theme/lib/flot-spline/jquery.flot.spline.js"></script>
  <script src="theme/lib/jquery.sparkline.bower/jquery.sparkline.min.js"></script>
  <!-- <script src="theme/lib/chart.js/Chart.js"></script> -->
  <!-- <script src="theme/lib/echarts/echarts.min.js"></script> -->
  <script src="https://cdn.jsdelivr.net/npm/echarts@5.5.1/dist/echarts.min.js"></script>
  <script src="theme/lib/select2/js/select2.full.min.js"></script>
  <script src="http://maps.google.com/maps/api/js?key=AIzaSyDw_FHu8ftIuC-35k9ViKlnp63L2vnGiLU"></script>

  <script src="theme/lib/gmaps/gmaps.js"></script>

  <script src="theme/js/bracket.js"></script>
  <script src="theme/js/map.shiftworker.js"></script>
  <script src="theme/js/ResizeSensor.js"></script>
  <script src="theme/js/dashboard.js"></script>
  <!-- <script src="theme/js/chart.echarts.js"></script> -->
  <script>
    $(function() {
      'use strict'
      // FOR DEMO ONLY
      // menu collapsed by default during first page load or refresh with screen
      // having a size between 992px and 1299px. This is intended on this page only
      // for better viewing of widgets demo.
      $(window).resize(function() {
        minimizeMenu();
      });
      minimizeMenu();

      function minimizeMenu() {
        if (window.matchMedia('(min-width: 992px)').matches && window.matchMedia('(max-width: 1299px)').matches) {
          // show only the icons and hide left menu label by default
          $('.menu-item-label,.menu-item-arrow').addClass('op-lg-0-force d-lg-none');
          $('body').addClass('collapsed-menu');
          $('.show-sub + .br-menu-sub').slideUp();
        } else if (window.matchMedia('(min-width: 1300px)').matches && !$('body').hasClass('collapsed-menu')) {
          $('.menu-item-label,.menu-item-arrow').removeClass('op-lg-0-force d-lg-none');
          $('body').removeClass('collapsed-menu');
          $('.show-sub + .br-menu-sub').slideDown();
        }
      }
    });
  </script>
  <script>
    (function(document, window, $) {

      function generateMonthYearSeries(startDate, endDate) {

        // Array to hold the month-year strings
        let monthYearStrings = [];

        // Validate the dates
        if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
          throw new Error('Invalid date format. Please provide valid dates.');
        }

        // Ensure startDate is before endDate
        if (startDate > endDate) {
          throw new Error('The "from" date must be before the "to" date.');
        }

        // Function to format date as "Month-Year"
        function formatMonthYear(date) {
          const months = ["JAN", "FEB", "MAR", "APR", "MAY", "JUN",
            "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"
          ];
          let month = months[date.getMonth()];
          let year = date.getFullYear();
          return `${month}-${year}`;
        }

        // Iterate through the months from startDate to endDate
        let currentDate = new Date(startDate.getFullYear(), startDate.getMonth(), 1);
        while (currentDate <= endDate) {
          monthYearStrings.push(formatMonthYear(currentDate));
          // Move to the next month
          currentDate.setMonth(currentDate.getMonth() + 1);
        }

        return monthYearStrings;
      }


      document.getElementById("li-beneficiary").classList.add('active');
      document.getElementById("levelAchieved").classList.add('active');

      function htmlDecode(input) {
        var e = document.createElement('div');
        e.innerHTML = input;
        return e.childNodes.length === 0 ? "" : e.childNodes[0].nodeValue;
      }
      var lang = JSON.parse(htmlDecode("<%= JSON.stringify(lang) %>"));

      var TotalCountLevelAcheivedByUC = JSON.parse(htmlDecode("<%= JSON.stringify(TotalCountLevelAcheivedByUC) %>"));
      var TotalCountLevelAcheivedByMonth = JSON.parse(htmlDecode("<%= JSON.stringify(TotalCountLevelAcheivedByMonth) %>"));
      var timeSeries = generateMonthYearSeries(new Date("2019-01-01"), new Date())

      const totalUCAchieved = TotalCountLevelAcheivedByUC.reduce((l, c) => {
        if (!l[c.UCID]) l[c.UCID] = {
          [c.MonitoringLevel]: c.Count
        };
        else l[c.UCID][c.MonitoringLevel] = c.Count;
        return l;
      }, {})


      const totalLevelWiseAchieved = TotalCountLevelAcheivedByUC.reduce((l, c) => {
        if (!l[c.MonitoringLevel]) l[c.MonitoringLevel] = c.Count;
        else l[c.MonitoringLevel] += c.Count;
        return l;
      }, {})



      const totalAchieved = TotalCountLevelAcheivedByMonth.reduce((l, c) => {
        if (!l[c.CD]) l[c.CD] = {
          [c.MonitoringLevel]: c.Count
        };
        else l[c.CD][c.MonitoringLevel] = c.Count;
        return l;
      }, {})

      var app = {};

      const posList = [
        'left',
        'right',
        'top',
        'bottom',
        'inside',
        'insideTop',
        'insideLeft',
        'insideRight',
        'insideBottom',
        'insideTopLeft',
        'insideTopRight',
        'insideBottomLeft',
        'insideBottomRight'
      ];
      app.configParameters = {
        rotate: {
          min: -90,
          max: 90
        },
        align: {
          options: {
            left: 'left',
            center: 'center',
            right: 'right'
          }
        },
        verticalAlign: {
          options: {
            top: 'top',
            middle: 'middle',
            bottom: 'bottom'
          }
        },
        position: {
          options: posList.reduce(function(map, pos) {
            map[pos] = pos;
            return map;
          }, {})
        },
        distance: {
          min: 0,
          max: 100
        }
      };

      app.config = {
        rotate: 90,
        align: 'left',
        verticalAlign: 'middle',
        position: 'insideBottom',
        distance: 15,
        onChange: function() {
          const labelOption = {
            rotate: app.config.rotate,
            align: app.config.align,
            verticalAlign: app.config.verticalAlign,
            position: app.config.position,
            distance: app.config.distance
          };
          myChart.setOption({
            series: [{
                label: labelOption
              },
              {
                label: labelOption
              },
              {
                label: labelOption
              },
              {
                label: labelOption
              }
            ]
          });
        }

      };

      const labelOption = {
        show: true,
        // position: app.config.position,
        // distance: app.config.distance,
        // align: app.config.align,
        // verticalAlign: app.config.verticalAlign,
        // rotate: app.config.rotate,
        formatter: '{c}  {name|{a}}',
        fontSize: 12,
        rich: {
          name: {}
        }
      };
      var LabelMonths = [];
      var ChartData = [];
      const levelValue = {
        [1]: [],
        [2]: [],
        [3]: [],
        [4]: []
      };
      const levelValueUC = {
        [1]: [],
        [2]: [],
        [3]: [],
        [4]: []
      };
      timeSeries.forEach(period => {
        //LabelMonths.push(period);
        let value = totalAchieved?.[period]?.[1];
        //ChartData.push(value ?? 0);
        levelValue[1].push(totalAchieved?.[period]?.[1] ?? 0);
        levelValue[2].push(totalAchieved?.[period]?.[2] ?? 0);
        levelValue[3].push(totalAchieved?.[period]?.[3] ?? 0);
        levelValue[4].push(totalAchieved?.[period]?.[4] ?? 0);
      })



      Object.keys(totalUCAchieved).forEach(uc => {
        levelValueUC[1].push(totalUCAchieved?.[uc]?.[1] ?? 0);
        levelValueUC[2].push(totalUCAchieved?.[uc]?.[2] ?? 0);
        levelValueUC[3].push(totalUCAchieved?.[uc]?.[3] ?? 0);
        levelValueUC[4].push(totalUCAchieved?.[uc]?.[4] ?? 0);
      });
      var divByUC = document.getElementById('LevelAchievedByUC');
      var divByMonth = document.getElementById('LevelAchievedByMonthChart');
      var divAll = document.getElementById('LevelAchievedAll');

      const min = timeSeries[timeSeries.length - 4];
      const max = timeSeries[timeSeries.length - 1];

      var chartByUC = new echarts.init(divByUC, null, {
        renderer: 'canvas'
      });
      var chartByMonth = new echarts.init(divByMonth, null, {
        renderer: 'canvas'
      });

      var chartAll = new echarts.init(divAll, null, {
        renderer: 'canvas'
      });

      let optionByUC = {
        tooltip: {
          trigger: 'axis',
          axisPointer: {
            type: 'cross',
            label: {
              backgroundColor: '#6a7985'
            }
          }
        },
        toolbox: {
          show: true,
          orient: 'vertical',
          left: 'right',
          top: 'center',
          feature: {
            mark: {
              show: true
            },
            magicType: {
              show: true,
              type: ['line', 'bar', 'stack','tiled']
            },
            restore: {
              show: true
            },
            saveAsImage: {
              show: true
            }
          }
        },
        angleAxis: {
          type: 'category',
          data: Object.keys(totalUCAchieved)
        },
        radiusAxis: {},
        polar: {},
        series: [{
            type: 'bar',
            data: levelValueUC[1],
            coordinateSystem: 'polar',
            name: 'Level 1',
            stack: 'a',
            emphasis: {
              focus: 'series'
            }
          },
          {
            type: 'bar',
            data: levelValueUC[2],
            coordinateSystem: 'polar',
            name: 'Level 2',
            stack: 'a',
            emphasis: {
              focus: 'series'
            }
          },
          {
            type: 'bar',
            data: levelValueUC[3],
            coordinateSystem: 'polar',
            name: 'Level 3',
            stack: 'a',
            emphasis: {
              focus: 'series'
            }
          },
          {
            type: 'bar',
            data: levelValueUC[4],
            coordinateSystem: 'polar',
            name: 'Level 4',
            stack: 'a',
            emphasis: {
              focus: 'series'
            }
          }
        ],
        legend: {
          show: true,
          data: ['Level 1', 'Level 2', 'Level 3', 'Level 4']
        }
      };
      chartByUC.setOption(optionByUC)

      let optionAll = {
        tooltip: {
          axisPointer: {
            type: 'cross',
            label: {
              backgroundColor: '#6a7985'
            }
          }
        },
        legend: {
          top: 'bottom'
        },
        toolbox: {
          show: true,
          orient: 'vertical',
          left: 'right',
          top: 'center',
          feature: {
            mark: {
              show: true
            },
            saveAsImage: {
              show: true
            }
          }
        },
        series: [{
          type: 'pie',
          radius: [50, 250],
          center: ['50%', '50%'],
          roseType: 'area',
          itemStyle: {
            borderRadius: 8
          },
          data: [{
              value: totalLevelWiseAchieved[1],
              name: 'Level 1'
            },
            {
              value: totalLevelWiseAchieved[2],
              name: 'Level 2'
            },
            {
              value: totalLevelWiseAchieved[3],
              name: 'Level 3'
            },
            {
              value: totalLevelWiseAchieved[4],
              name: 'Level 4'
            },

          ]
        }]
      };
      chartAll.setOption(optionAll);

      let optionByMonth = {
        tooltip: {
          trigger: 'axis',
          axisPointer: {
            type: 'cross',
            label: {
              backgroundColor: '#6a7985'
            }
          }
        },

        toolbox: {
          show: true,
          orient: 'vertical',
          left: 'right',
          top: 'center',
          feature: {
            mark: {
              show: true
            },
            magicType: {
              show: true,
              type: ['line', 'bar', 'stack','tiled']
            },
            restore: {
              show: true
            },
            saveAsImage: {
              show: true
            }
          }
        },
        legend: {
          data: ["Level 1", "Level 2", "Level 3", "Level 4"],
          display: true,

        },
        dataZoom: {
          show: true
        },
        aria: {
          enabled: true,
          decal: {
            show: true
          }
        },
        grid: {
          left: '3%',
          right: '4%',
          bottom: '3%',
          containLabel: true
        },

        xAxis: [{
          type: 'category',
          axisTick: {
            show: true
          },
          data: timeSeries,
          boundaryGap: true,
          // min,
          // max
        }],
        yAxis: [{
          type: 'value',
          position: "right"
        }],
        series: [{
            name: 'Level 1',
            type: 'bar',
            barGap: 0,
            //     label: labelOption,
            emphasis: {
              focus: 'series'
            },
            data: levelValue[1]
          },
          {
            name: 'Level 2',
            type: 'bar',
            barGap: 0,
            //     label: labelOption,
            emphasis: {
              focus: 'series'
            },
            data: levelValue[2]
          },
          {
            name: 'Level 3',
            type: 'bar',
            barGap: 0,
            //     label: labelOption,
            emphasis: {
              focus: 'series'
            },
            data: levelValue[3]
          },
          {
            name: 'Level 4',
            type: 'bar',
            barGap: 0,
            //   label: labelOption,
            emphasis: {
              focus: 'series'
            },
            data: levelValue[4]
          }
        ]

      }

      chartByMonth.setOption(optionByMonth);

    })(document, window, jQuery);
  </script>
</body>

</html>